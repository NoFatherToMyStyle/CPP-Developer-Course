#include <iostream>
#include <stdlib.h>

void intro();
void displayBoard(char board[3][3]);
int makePlayerChoice();
bool isEmptySpace(int playerChoice, char board[3][3]);
bool isAWin(char board[3][3]);
void playAgainChoice(char &playAgain, bool &restart, int &drawCounter, char board[3][3]);

int main() {
	char board[3][3] = {{' ',' ',' '},
						{' ',' ',' '},
						{' ',' ',' '} };
	int playerChoice;
	bool restart = true;
	bool gameOver = false;
	int drawCounter = 0;
	while (restart == true) {
		intro();

		while (isAWin(board) == false && drawCounter != 9) {
			//O's turn
			std::cout << "\nO's turn, pick a spot\n" << std::endl;
			displayBoard(board);
			playerChoice = makePlayerChoice();
			while (isEmptySpace(playerChoice, board) == false) {
				std::cout << "Not empty, please pick another spot!" << std::endl;
				playerChoice = makePlayerChoice();
			}
			board[playerChoice / 10][playerChoice % 10] = 'O';
			drawCounter += 1;
			system("CLS");

			if (isAWin(board) == true) {
				std::cout << "\nO wins!\n" << std::endl;
			}
			// X's Turn check to see if 0 won
			if (isAWin(board) == false && drawCounter != 9) {
				std::cout << "\nX's turn, pick a spot\n" << std::endl;
				displayBoard(board);
				playerChoice = makePlayerChoice();
				while (isEmptySpace(playerChoice, board) == false) {
					std::cout << "Not a valid move, please pick another spot!" << std::endl;
					playerChoice = makePlayerChoice();
				}
				board[playerChoice / 10][playerChoice % 10] = 'X';
				drawCounter += 1;
				system("CLS");

				if (isAWin(board) == true) {
					std::cout << "\nX wins!\n" << std::endl;
				}
			}
		}
		displayBoard(board);
		if (drawCounter == 9 && isAWin(board) == false) {
			std::cout << "Game ended in a draw.\n" << std::endl;
		}
		
		char playAgain;

		std::cout << "Do you want to play again?\n Type \"Y\" to play again or anything else to terminate" << std::endl;
		std::cin >> playAgain;
		playAgainChoice(playAgain, restart, drawCounter, board);
	}

	return 0;
}

void intro() {
	std::cout << "  _____ _         _____             _____          " << std::endl;
	std::cout << " |_   _(_) ___   |_   ___ _  ___   |_   ____   ___ " << std::endl;
	std::cout << "   | | | |/ _______| |/ _` |/ _______| |/ _ \\ / _ \\" << std::endl;
	std::cout << "   | | | | (_|_____| | (_| | (_|_____| | (_) |  __/" << std::endl;
	std::cout << "   |_| |_|\\___|    |_|\\__,_|\\___|    |_|\\___/ \\___| " << std::endl;
	std::cout << "=========================================================\n" << std::endl;
}
//shows the board
void displayBoard(char board[3][3]) {
	std::cout << "    1C   2C   3C\n" << std::endl;
	std::cout << "1R   " << board[0][0] << " |  " << board[0][1] << " | " << board[0][2] << std::endl;
	std::cout << "    ------------" << std::endl;
	std::cout << "2R   " << board[1][0] << " |  " << board[1][1] << " | " << board[1][2] << std::endl;
	std::cout << "    ------------" << std::endl;
	std::cout <<"3R   " << board[2][0] << " |  " << board[2][1] << " | " << board[2][2] << std::endl;
	std::cout << "\nR = Row\n" << "C = Column\n" << std::endl;
}
//turns the row &_ column into one number for use
int makePlayerChoice() {
	int playerRow;
	int playerColumn;
	std::cout << "Please enter the row to place in (1-3)" << std::endl;
	std::cin >> playerRow;
	playerRow -= 1;
	std::cout << "Please enter the column (1-3)" << std::endl;
	std::cin >> playerColumn;
	playerColumn -= 1;
	playerRow *= 10;
	return playerRow + playerColumn;
}
//checks for empty board space using /10 and %10 
bool isEmptySpace(int playerChoice, char board[3][3]) {
	if (board[playerChoice / 10][playerChoice % 10] == ' ') {
		return true;
	}
	else return false;
}
//Win Logic
bool isAWin(char board[3][3]) {
	if ((board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O') ||
		(board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X')) return true;

	if ((board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O') ||
		(board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X')) return true;

	if ((board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O') ||
		(board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X')) return true;

	if ((board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O') ||
		(board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X')) return true;

	if ((board[0][1] == 'O' && board[1][1] == 'O' && board[2][1] == 'O') ||
		(board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X')) return true;

	if ((board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O') ||
		(board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X')) return true;

	if ((board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O') ||
		(board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X')) return true;

	if ((board[0][2] == 'O' && board[1][1] == 'O' && board[2][0] == 'O') ||
		(board[0][2] == 'X' && board[1][1] == 'X' && board[2][0] == 'X')) return true;

	else return false;
}
//Play again Y clears the game to beginning.
void playAgainChoice(char &playAgain, bool &restart, int &drawCounter, char board[3][3]) {
	if (playAgain == 'Y') {
		restart = true;
		system("CLS");
		drawCounter = 0;
		for (int i = 0; i < 3; ++i) {
			for (int x = 0; x < 3; ++x) {
				board[i][x] = ' ';
			}
		}
		isAWin(board);
	}
	else {
		restart = false;
		std::cout << "Thank you for playing!" << std::endl;
	}
}
